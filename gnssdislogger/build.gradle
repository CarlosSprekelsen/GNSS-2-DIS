buildscript {
    repositories {
        google()
//        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.5.2'
        classpath 'org.jacoco:org.jacoco.core:0.7.4.201502262128'
        classpath "com.moowork.gradle:gradle-node-plugin:0.13"
    }
}

//Android
apply plugin: 'com.android.application'

//Generating PGP
apply plugin: 'signing'
//Generating colorful output
apply from: 'buildtools/ColoredOutput.gradle'
project.ext.set("GHACTIONS_FOLDING", true)
//Generate help pages
apply plugin: 'com.moowork.node'

repositories {
    mavenCentral()

//    jcenter()

    maven {
        url "https://jitpack.io"
    }
    google()


}

android {
    signingConfigs {
        debug {
            storeFile file('C:\\Users\\p5cts-admin\\Documents\\SW_development\\gnssdislogger\\signatures\\ets.certificate.android.jks')
            storePassword 'Crlssr2002'
            keyAlias 'GNSSLogger'
            keyPassword 'P@ssw0rd'
        }
        release {
            storeFile file('/nfs/sprek/Software/gnssdislogger/signatures/ets.signature.android.jks')
            storePassword 'Crlssr2002'
            keyAlias 'GNSSLogger'
            keyPassword 'P@ssw0rd'
        }
    }
    compileSdk 34

    defaultConfig {
        applicationId project.APP_ID
        minSdk 29
        targetSdk 33

        versionCode project.APP_VERSION_CODE
        versionName project.APP_VERSION_NAME
        signingConfig signingConfigs.debug
    }

    //Adding Open Street Maps API keys to BuildConfig
    //defaultConfig {
        //Set these values in ~/.gradle/gradle.properties, use in code as BuildConfig.OSM_CONSUMER_KEY
        //buildConfigField "String", "OSM_CONSUMER_KEY", "\"" + GPSLOGGER_OSM_CONSUMERKEY + "\""
        //buildConfigField "String", "OSM_CONSUMER_SECRET", "\"" + GPSLOGGER_OSM_CONSUMERSECRET + "\""
    //}

    buildTypes {
        debug {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            debuggable true
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            debuggable false
        }
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/DEPENDENCIES.txt', 'META-INF/LICENSE.txt', 'META-INF/NOTICE.txt', 'META-INF/NOTICE', 'META-INF/LICENSE', 'META-INF/DEPENDENCIES', 'META-INF/notice.txt', 'META-INF/license.txt', 'META-INF/dependencies.txt', 'META-INF/LGPL2.1']
        }
    }

    //Bug: http://stackoverflow.com/a/20675331


    testOptions {
        unitTests.returnDefaultValues = true
    }
    compileOptions {
        sourceCompatibility = 11
        targetCompatibility = 11
    }
    lint {
        abortOnError false
    }
    namespace 'ets.acmi.gnssdislogger'
    buildFeatures {
        buildConfig true
    }


    //Release signing key
    if (project.hasProperty("RELEASE_STORE_FILE")) {
        signingConfigs {
            release {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }

        buildTypes {
            release {
                signingConfig signingConfigs.release
            }
        }
    }

}


dependencies {

    implementation 'androidx.preference:preference:1.2.1'
    implementation 'com.google.android.gms:play-services-base:18.5.0'
    implementation 'com.google.android.gms:play-services-location:21.3.0'
    implementation 'com.google.android.gms:play-services-auth:21.2.0'
    //Map views
    implementation 'com.google.android.gms:play-services-maps:19.0.0'
    implementation("org.osmdroid:osmdroid-android:6.1.13")

    // Lifecycle (fixes errors on Android 12)
    implementation 'androidx.lifecycle:lifecycle-viewmodel:2.8.4'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.8.4'

    // Google material
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.google.android.material:material:1.12.0-alpha03'

    // JavaOpenDis Libraries  (IEEE1278)
    implementation('edu.nps.moves:open-dis:5.6')

    //FTP operations
    implementation('commons-net:commons-net:3.6')

    //Debug Logging
    implementation('org.slf4j:slf4j-api:2.0.6')
    implementation('com.github.tony19:logback-android-classic:1.1.1-6') {
        exclude group: 'com.google.android', module: 'android'
    }

    implementation('com.github.tony19:logback-android-core:1.1.1-6')

    //CardViews
    implementation 'androidx.cardview:cardview:1.0.0'

    //Material dialogs
    implementation('com.github.afollestad.material-dialogs:core:0.9.6.0@aar') {
        transitive = true
    }
    implementation('com.github.afollestad.material-dialogs:commons:0.9.6.0@aar') {
        transitive = true
    }

    //Android Priority Jobqueue
    implementation('com.birbit:android-priority-jobqueue:3.0.0') {
        exclude group: 'com.google.android', module: 'android'
    }

    //Event bus
    implementation 'de.greenrobot:eventbus:2.4.1'

    //Expandable textview in the FAQ
    implementation 'com.ms-square:expandableTextView:0.1.4'

    //OKHTTP client
    implementation 'com.squareup.okhttp3:okhttp:5.0.0-alpha.12'

    //OKHTTP interceptor, works with oauth signpost
    implementation 'se.akerfeldt:okhttp-signpost:1.1.0'

    //OAuth signing
    implementation('oauth.signpost:signpost-core:2.1.1') {
        exclude module: 'commons-codec'
    }

    //Markdown to HTML library
    implementation 'com.github.commonsguy:cwac-anddown:dedb48ec0f'

    implementation group: 'com.jcraft', name: 'jsch', version: '0.1.55'
    implementation group: 'com.jcraft', name: 'jzlib', version: '1.1.3'
    implementation 'commons-codec:commons-codec:1.14'


    //Libraries required for unit testing
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    

}


tasks.withType(Test).configureEach {
    //Tell Gradle to always run the tests even if build is up to date
    outputs.upToDateWhen { false }

    //Tell Gradle to show test output in the console
    testLogging {
        events "failed"
        exceptionFormat = 'full'
        showStandardStreams true
    }
}

tasks.configureEach { task ->
    //Don't run lint. Takes too long.
    if (task.name.contains("lint")) {
        task.enabled = false
    }
}

tasks.register('buildTranslationArray') {

    doLast {
        def foundLocales = new StringBuilder()
        foundLocales.append("new String[]{")

        fileTree("src/main/res").visit { FileVisitDetails details ->
            if (details.file.path.endsWith("strings.xml")) {
                def languageCode = details.file.parent.tokenize(File.separator).last().replaceAll('values-', '').replaceAll('-r', '-')
                languageCode = (languageCode == "values") ? "en" : languageCode
                foundLocales.append("\"").append(languageCode).append("\"").append(",")
            }
        }

        foundLocales.append("}")
        //Don't forget to remove the trailing comma
        def foundLocalesString = foundLocales.toString().replaceAll(',}', '}')
        android.defaultConfig.buildConfigField "String[]", "TRANSLATION_ARRAY", foundLocalesString
    }


}
preBuild.dependsOn buildTranslationArray


tasks.register('buildDocs', NodeTask) {
    dependsOn "installNodeModules"
    script = file('../assets/generate-pages/index.js')
    execOverrides {
        it.workingDir = '../assets/generate-pages'
    }
}

tasks.register('installNodeModules', NpmTask) {
    args = ['install']
    execOverrides {
        it.workingDir = '../assets/generate-pages'
    }
}

tasks.register('copyFAQsIntoAssets', Copy) {
    from '../assets/text/faq'
    into 'src/main/assets/faq/'
    include('*.md')
}

tasks.register('deleteFAQsAssets', Delete) {
    def dirName = 'src/main/assets/faq'
    fileTree(dirName).include('**/*.md').each {
        f -> delete f
    }
}

tasks.register('copyFinalAPK') {
    //Copies final APK to this directory
    def finalApkName = "ets.acmi.gnssdislogger-" + android.defaultConfig.versionName + ".apk"

    copy {
        from "build/outputs/apk/release/ets.acmi.gnssdislogger-release.apk"
        into "./"

        // Use a closure to map the file name
        rename { String fileName ->
            fileName.replace("ets.acmi.gnssdislogger-release.apk", finalApkName)
        }
    }
    //PGP Sign
    //Verify with gpg --verify ~/Downloads/ets.acmi.gnssdislogger-71.apk.asc
    if (file(finalApkName).isFile()) {
        signing {
            useGpgCmd()
            sign file(finalApkName)
        }

        //SHA256 Checksum
        //Verify with sha256sum -c ~/Downloads/ets.acmi.gnssdislogger-71.apk.SHA256
        ant.checksum(file: finalApkName, fileext: '.SHA256', algorithm: "SHA-256", pattern: "{0} {1}")
    }

}

preBuild.dependsOn copyFAQsIntoAssets
clean.dependsOn deleteFAQsAssets

tasks.register('deleteReleaseAPKs', Delete) {
    delete fileTree(dir: './', include: '*.apk*')
}

clean.dependsOn deleteReleaseAPKs
